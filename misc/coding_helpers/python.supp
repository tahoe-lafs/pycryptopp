# generated on buildbot.rubenkerkhof.com, which had, according to Ruben
# Fedora's package "openssl-1.0.1-0.1.beta2.fc17.x86_64"
{
   buildbot.rubenkerkhof.com cond fips openssl 1
   Memcheck:Cond
   fun:bcmp
   fun:fips_get_entropy
   fun:FIPS_drbg_instantiate
   fun:RAND_init_fips
   fun:OPENSSL_init_library
   fun:SSL_library_init
   fun:init_hashlib
}

{
   buildbot.rubenkerkhof.com cond fips openssl 2
   Memcheck:Cond
   fun:fips_get_entropy
   fun:FIPS_drbg_instantiate
   fun:RAND_init_fips
   fun:OPENSSL_init_library
   fun:SSL_library_init
   fun:init_hashlib
}

{
   buildbot.rubenkerkhof.com val _x86_64_AES_encrypt_compact
   Memcheck:Value8
   fun:_x86_64_AES_encrypt_compact
   fun:AES_encrypt
}

# generated on buildbot.rubenkerkhof.com Jakub Jellinek guessed that this was
# a false alarm due to index knowing that pointers are 4-byte aligned and
# valgrind not taking that into account:
# https://bugzilla.redhat.com/show_bug.cgi?id=159701
{
   buildbot.rubenkerkhof.com cond index
   Memcheck:Cond
   fun:index
   fun:expand_dynamic_string_token
   fun:_dl_map_object
   fun:map_doit
   fun:_dl_catch_error
}

# generated on luther sid with "python: 2.7.2+ (default, Jan 20 2012, 23:05:38)  [GCC 4.6.2]"
# e.g. https://tahoe-lafs.org/buildbot-pycryptopp/builders/luther%20sid/builds/38/steps/double%20load%20valgrind/logs/valgrind
{
   luther sid addr4 realloc
   Memcheck:Addr4
   fun:PyObject_Realloc.*
}

{
   luther sid cond realloc
   Memcheck:Cond
   fun:PyObject_Realloc.*
}

{
   luther sid value4 realloc
   Memcheck:Value4
   fun:PyObject_Realloc.*
}

# generated on luther sid
# e.g. https://tahoe-lafs.org/buildbot-pycryptopp/builders/luther%20sid/builds/116/steps/double%20load%20valgrind/logs/valgrind
{
   luther sid addr4 realloc
   Memcheck:Addr4
   fun:PyObject_Realloc.part.*
}

{
   luther sid cond realloc
   Memcheck:Cond
   fun:PyObject_Realloc.part.*
}

{
   luther sid value4 realloc
   Memcheck:Value4
   fun:PyObject_Realloc.part.*
}

# glibc was apparently changed to avoid this: http://sources.redhat.com/bugzilla/show_bug.cgi?id=4306
{
   use (not really, according to Ulrich Drepper) of uninitialised bytes by glibc in utimes()
   Memcheck:Param
   utimes(tvp[1])
   fun:utimes
   obj:/usr/lib/libpython2.4.so.1.0
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Addr8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Addr8
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Value8
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Addr8
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8
   Memcheck:Value8
   fun:PyObject_Realloc.*
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}

{
   python mem management stuff I assume
   Memcheck:Addr4
   obj:/usr/bin/python2.7
   fun:_PyObject_GC_Resize
   fun:PyFrame_New
}

{
   more python mem management stuff I assume
   Memcheck:Cond
   obj:/usr/bin/python2.7
   fun:_PyObject_GC_Resize
   fun:PyFrame_New
}

{
   more python mem management stuff I assume
   Memcheck:Value8
   obj:/usr/bin/python2.7
   fun:_PyObject_GC_Resize
   fun:PyFrame_New
}

{
   more python mem management stuff I assume
   Memcheck:Addr4
   obj:/usr/bin/python2.7
   fun:_PyString_Resize
}

{
   more python mem management stuff I assume
   Memcheck:Cond
   obj:/usr/bin/python2.7
   fun:_PyString_Resize
}

{
   more python mem management stuff I assume
   Memcheck:Value8
   obj:/usr/bin/python2.7
   fun:_PyString_Resize
}

{
   more python mem management stuff I assume
   Memcheck:Cond
   obj:/usr/bin/python2.7
   fun:PyNode_AddChild
}

{
   more python mem management stuff I assume
   Memcheck:Value8
   obj:/usr/bin/python2.7
   fun:PyNode_AddChild
}

{
   more python mem management stuff I assume
   Memcheck:Addr4
   obj:/usr/bin/python2.7
   fun:PyNode_AddChild
}

{
   more python mem management stuff I assume
   Memcheck:Addr4
   obj:/usr/bin/python2.7
   ...
   obj:/usr/bin/python2.7
   fun:PyAST_Compile
}

{
   more python mem management stuff I assume
   Memcheck:Addr4
   obj:/usr/bin/python2.7
   ...
   obj:/usr/bin/python2.7
   fun:PyAST_Compile
}

{
   some unknown problem in python getdynloadfunc
   Memcheck:Addr8
   obj:/lib/ld-2.7.so
   ...
   obj:/lib/ld-2.7.so
   obj:/lib/libdl-2.7.so
   obj:/lib/ld-2.7.so
   obj:/lib/libdl-2.7.so
   fun:dlopen
   fun:_PyImport_GetDynLoadFunc
}

{
   some other unknown problem in python libdl stuff
   Memcheck:Addr8
   obj:/lib/ld-2.7.so
   ...
   obj:/lib/ld-2.7.so
   obj:/lib/libdl-2.7.so
   obj:/lib/ld-2.7.so
}

